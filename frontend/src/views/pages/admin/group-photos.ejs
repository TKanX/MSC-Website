<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../../components/head.ejs") %>
  <script src="/js/events.js"></script>
  <title>MSC Admin | Group Photos</title>
</head>

<body class="bg-gray-100">
  <%- include("../../components/admin/sidebar.ejs") %>

  <main class="sm:ml-64 p-6">
    <h1 class="text-2xl font-semibold mb-6">Group Photos</h1>

    <!-- Upload Area -->
    <div id="upload-area" class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer transition-colors duration-300 mb-6" ondragover="handleDragOver(event)" ondragleave="handleDragLeave(event)" ondrop="handleDrop(event)" onclick="triggerFileInput()">
      Click or drag photos here to upload
      <input id="file-input" type="file" accept="image/*" multiple class="hidden" onchange="handleFileSelect(event)">
    </div>

    <!-- Gallery -->
    <div id="gallery" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"></div>

    <!-- Modal for enlarged photo -->
    <div id="modal" class="hidden fixed inset-0 z-[1000] flex items-center justify-center bg-black bg-opacity-80">
      <div class="relative bg-white p-6 rounded-lg max-w-3xl max-h-screen">
        <button class="absolute top-2 right-2 bg-black bg-opacity-70 text-white rounded-full w-6 h-6 flex items-center justify-center" onclick="closeModal()">&times;</button>
        <img id="modal-img" src="" alt="Enlarged Photo" class="max-w-full max-h-screen object-contain mb-4">

        <!-- Date and Description -->
        <input id="modal-date" type="date" class="border p-2 rounded w-full mb-2">
        <textarea id="modal-description" class="border p-2 rounded w-full mb-4" placeholder="Enter description..."></textarea>
        <button class="bg-blue-500 text-white px-4 py-2 rounded" onclick="updatePhoto()">Update</button>
      </div>
    </div>

    <!-- Loading Spinner -->
    <div id="loading-spinner" class="fixed inset-0 flex items-center justify-center bg-white bg-opacity-70 hidden">
      <div class="loader">Loading...</div>
    </div>
  </main>

  <script>
    const events = new Events(app);

    let groupPhotos = [];
    let currentPhotoId = null;

    // Render group photos from the global array
    const renderGroupPhotos = () => {
      const gallery = document.getElementById("gallery");
      gallery.innerHTML = "";

      groupPhotos.forEach(photo => {
        const photoItem = document.createElement("div");
        photoItem.className = "relative overflow-hidden rounded-lg cursor-pointer transition-transform duration-300";

        const imgWrapper = document.createElement("div");
        imgWrapper.className = "w-full h-80 bg-gray-200 flex items-center justify-center overflow-hidden";

        const img = document.createElement("img");
        img.src = photo.photo;
        img.alt = "Group Photo";
        img.className = "object-cover h-full w-full";
        img.onclick = () => openModal(photo);

        const deleteBtn = document.createElement("button");
        deleteBtn.className = "absolute top-2 right-2 bg-red-700 text-white rounded-full w-6 h-6 flex items-center justify-center";
        deleteBtn.innerHTML = "&times;";
        deleteBtn.onclick = (e) => {
          e.stopPropagation();
          deletePhoto(photo.id);
        };

        imgWrapper.appendChild(img);
        photoItem.appendChild(imgWrapper);
        photoItem.appendChild(deleteBtn);
        gallery.appendChild(photoItem);
      });
    };

    // Function to fetch and render group photos
    const fetchGroupPhotos = async () => {
      try {
        const response = await events.getGroupPhotoIds();
        const data = response.data.reverse();

        if (response.status === "success") {
          groupPhotos = await Promise.all(data.map(async id => {
            const photoResponse = await events.getGroupPhotoById(id);
            return {
              id,
              ...photoResponse.data
            };
          }));
          renderGroupPhotos();
        }
      } catch (error) {
        console.error('Error fetching group photos:', error);
      } finally {
        // Hide the loading spinner after the images are loaded
        document.getElementById("loading-spinner").style.display = 'none';
      }
    };

    // Function to open modal with enlarged photo
    const openModal = (photo) => {
      currentPhotoId = photo.id;
      const modal = document.getElementById("modal");
      const modalImg = document.getElementById("modal-img");
      const modalDate = document.getElementById("modal-date");
      const modalDescription = document.getElementById("modal-description");

      modalImg.src = photo.photo;
      modalDate.value = photo.date || '';
      modalDescription.value = photo.description || '';

      modal.classList.remove("hidden");
    };

    // Function to close modal
    const closeModal = () => {
      const modal = document.getElementById("modal");
      modal.classList.add("hidden");
    };

    // Function to update photo date and description
    const updatePhoto = async () => {
      const date = document.getElementById("modal-date").value;
      const description = document.getElementById("modal-description").value;

      try {
        await events.updateGroupPhotoDate(currentPhotoId, date);
        await events.updateGroupPhotoDescription(currentPhotoId, description);

        app.ui.alert("Photo updated successfully", "success");

        // Update local data
        const photo = groupPhotos.find(p => p.id === currentPhotoId);
        if (photo) {
          photo.date = date;
          photo.description = description;
        }

        renderGroupPhotos();
        closeModal();
      } catch (error) {
        console.error('Error updating photo:', error);
        app.ui.alert("Error updating photo", "error");
      }
    };

    // Function to delete a photo
    const deletePhoto = async (id) => {
      try {
        const response = await events.removeGroupPhoto(id);
        app.ui.alert(response.message, response.status);

        groupPhotos = groupPhotos.filter(photo => photo.id !== id);
        renderGroupPhotos();
      } catch (error) {
        console.error('Error deleting photo:', error);
        app.ui.alert("Error deleting photo", "error");
      }
    };

    // Function to handle file selection
    const handleFileSelect = async (event) => {
      const files = event.target.files;
      for (let file of files) {
        const reader = new FileReader();
        reader.onload = async (e) => {
          const base64 = e.target.result;

          const response = await events.addGroupPhoto(base64);
          app.ui.alert(response.message, response.status);

          if (response.status === "success") {
            groupPhotos.unshift({
              id: response.data,
              photo: base64
            });
            renderGroupPhotos();
          }
        };
        reader.readAsDataURL(file);
      }
    };

    // Function to handle drag over
    const handleDragOver = (event) => {
      event.preventDefault();
      event.stopPropagation();
      document.getElementById("upload-area").classList.add("border-green-500");
    };

    // Function to handle drag leave
    const handleDragLeave = (event) => {
      event.preventDefault();
      event.stopPropagation();
      document.getElementById("upload-area").classList.remove("border-green-500");
    };

    // Function to handle drop
    const handleDrop = (event) => {
      event.preventDefault();
      event.stopPropagation();
      document.getElementById("upload-area").classList.remove("border-green-500");
      const files = event.dataTransfer.files;
      document.getElementById("file-input").files = files;
      handleFileSelect({
        target: {
          files
        }
      });
    };

    // Function to trigger file input click
    const triggerFileInput = () => {
      document.getElementById("file-input").click();
    };

    // Fetch initial group photos on page load
    fetchGroupPhotos();
  </script>
</body>

</html>