<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../components/head.ejs") %>
  <script src="/js/events.js"></script>
  <meta name="description" content="Explore the group photos of the Material and Process Simulation Center (MSC) at Caltech.">
  <title>MSC | Group Photos</title>
  <style>
    .gallery {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin-left: -10px;
      width: auto;
    }

    .gallery-item {
      width: 250px;
      margin: 10px;
      position: relative;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .gallery img {
      width: auto;
      max-width: 100%;
      height: auto;
      object-fit: cover;
      filter: grayscale(100%);
      transition: filter 0.3s ease, transform 0.3s ease;
      cursor: pointer;
    }

    .gallery img:hover {
      filter: grayscale(0%);
      transform: scale(1.05);
    }

    .hover-info {
      display: none;
      position: absolute;
      bottom: 5px;
      left: 5px;
      background: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 5px;
      border-radius: 5px;
      font-size: 12px;
    }

    .gallery-item:hover .hover-info {
      display: block;
    }

    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      align-items: center;
      justify-content: center;
    }

    .modal-content {
      margin: 0 auto;
      max-width: 80%;
      max-height: 80%;
      animation: zoom 0.6s;
    }

    @keyframes zoom {
      from {
        transform: scale(0);
      }

      to {
        transform: scale(1);
      }
    }

    .close {
      position: absolute;
      top: 15px;
      right: 35px;
      color: #fff;
      font-size: 40px;
      font-weight: bold;
      transition: 0.3s;
      cursor: pointer;
    }

    .close:hover {
      color: #bbb;
    }

    .loading-spinner {
      display: none;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      border: 4px solid #f3f3f3;
      border-top: 4px solid #3498db;
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 2s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    /* Media query for mobile devices */
    @media (max-width: 600px) {
      .gallery-item {
        width: 100%;
        margin: 10px 0;
      }
    }
  </style>
</head>

<body>
  <!-- Header Section -->
  <%- include("../components/main-header.ejs") %>

  <!-- Subheader Menu Section -->
  <section class="subheader-menu bg-background-200 p-4">
    <div class="max-w-7xl mx-auto flex justify-start items-center border-b-2 border-primary-500">
      <a href="/events/photos" class="text-primary-600 font-semibold text-xl transition duration-300 mr-8">Group Photos</a>
      <a href="/events/calendar" class="text-black font-semibold text-xl hover:text-primary-600 transition duration-300">Calendar</a>
    </div>
  </section>

  <!-- Gallery Section -->
  <section class="p-8 bg-gray-100">
    <div class="max-w-7xl mx-auto">
      <h1 class="text-3xl font-semibold mb-6 text-center">Group Photos</h1>
      <div id="gallery" class="gallery">
        <!-- Loading Spinner -->
        <div id="loading-spinner" class="loading-spinner"></div>
      </div>
    </div>
  </section>

  <!-- Modal for full-size image -->
  <div id="modal" class="modal">
    <span class="close z-10" onclick="closeModal()">&times;</span>
    <div class="modal-body absolute">
      <img class="modal-content relative" id="modal-img">
      <div class="text-white relative p-4">
        <p id="modal-date" class="text-lg font-semibold"></p>
        <p id="modal-description"></p>
      </div>
    </div>
  </div>

  <!-- Footer Section -->
  <%- include("../components/footer.ejs") %>

  <!-- Include Masonry.js for layout -->
  <script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>

  <script>
    const events = new Events(app);

    // Fetch and render group photos when the DOM is fully loaded
    document.addEventListener('DOMContentLoaded', async function() {
      const gallery = document.getElementById('gallery');
      const loadingSpinner = document.getElementById('loading-spinner');

      // Show the loading spinner
      loadingSpinner.style.display = 'block';

      // Function to fetch and render group photos
      const fetchAndRenderGroupPhotos = async () => {
        try {
          // Fetch group photo IDs
          const response = await events.getGroupPhotoIds();
          const data = response.data.reverse();

          if (response.status === "success") {
            // Load each photo by ID
            const imagesLoadedPromises = data.map(async id => {
              const photoResponse = await events.getGroupPhotoById(id);
              const photoData = photoResponse.data;

              if (photoResponse.status === "success" && photoData) {
                return new Promise(resolve => {
                  const div = document.createElement('div');
                  div.className = 'gallery-item';

                  const img = document.createElement('img');
                  img.src = photoData.photo;
                  img.onclick = () => openModal(photoData);

                  img.onload = resolve;
                  div.appendChild(img);

                  // Add hover info
                  if (photoData.date || photoData.description) {
                    const hoverInfo = document.createElement('div');
                    hoverInfo.className = 'hover-info';
                    if (photoData.date) {
                      hoverInfo.innerHTML += `<p>Date: ${photoData.date}</p>`;
                    }
                    if (photoData.description) {
                      hoverInfo.innerHTML += `<p>Description: ${photoData.description.slice(0, 20)}...</p>`;
                    }
                    div.appendChild(hoverInfo);
                  }

                  gallery.appendChild(div);
                });
              }
            });

            await Promise.all(imagesLoadedPromises);
            new Masonry(gallery, {
              itemSelector: '.gallery-item',
              columnWidth: '.gallery-item',
              percentPosition: true,
              gutter: 10
            });
          }
        } catch (error) {
          console.error('Error fetching group photos:', error);
        } finally {
          // Hide the loading spinner after the images are loaded
          loadingSpinner.style.display = 'none';
        }
      };

      // Function to open the modal
      const openModal = (photoData) => {
        const modal = document.getElementById("modal");
        const modalImg = document.getElementById("modal-img");
        const modalDate = document.getElementById("modal-date");
        const modalDescription = document.getElementById("modal-description");

        modal.style.display = "flex";
        modalImg.src = photoData.photo;
        modalDate.textContent = photoData.date ? `Date: ${photoData.date}` : '';
        modalDescription.textContent = photoData.description ? `Description: ${photoData.description.slice(0, 50)}...` : '';
      };

      await fetchAndRenderGroupPhotos();
    });

    // Function to close the modal
    const closeModal = () => {
      const modal = document.getElementById("modal");
      modal.style.display = "none";
    };
  </script>
</body>

</html>